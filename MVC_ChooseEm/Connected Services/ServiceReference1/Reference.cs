//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_ChooseEm.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDataType", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class EventDataType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ClientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ClientId {
            get {
                return this.ClientIdField;
            }
            set {
                if ((this.ClientIdField.Equals(value) != true)) {
                    this.ClientIdField = value;
                    this.RaisePropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventMessage {
            get {
                return this.EventMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.EventMessageField, value) != true)) {
                    this.EventMessageField = value;
                    this.RaisePropertyChanged("EventMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class UserTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.FriendTable[] FriendTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.FriendTable[] FriendTables1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.PartyTable[] PartyTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] SongRatingFromPartyTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserLoginTable[] UserLoginTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UsersAtParty[] UsersAtPartiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.ZIPTable ZIPTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool accountTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> currentPartyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int zipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.FriendTable[] FriendTables {
            get {
                return this.FriendTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendTablesField, value) != true)) {
                    this.FriendTablesField = value;
                    this.RaisePropertyChanged("FriendTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.FriendTable[] FriendTables1 {
            get {
                return this.FriendTables1Field;
            }
            set {
                if ((object.ReferenceEquals(this.FriendTables1Field, value) != true)) {
                    this.FriendTables1Field = value;
                    this.RaisePropertyChanged("FriendTables1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.PartyTable[] PartyTables {
            get {
                return this.PartyTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyTablesField, value) != true)) {
                    this.PartyTablesField = value;
                    this.RaisePropertyChanged("PartyTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] SongRatingFromPartyTables {
            get {
                return this.SongRatingFromPartyTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.SongRatingFromPartyTablesField, value) != true)) {
                    this.SongRatingFromPartyTablesField = value;
                    this.RaisePropertyChanged("SongRatingFromPartyTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserLoginTable[] UserLoginTables {
            get {
                return this.UserLoginTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.UserLoginTablesField, value) != true)) {
                    this.UserLoginTablesField = value;
                    this.RaisePropertyChanged("UserLoginTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UsersAtParty[] UsersAtParties {
            get {
                return this.UsersAtPartiesField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersAtPartiesField, value) != true)) {
                    this.UsersAtPartiesField = value;
                    this.RaisePropertyChanged("UsersAtParties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.ZIPTable ZIPTable {
            get {
                return this.ZIPTableField;
            }
            set {
                if ((object.ReferenceEquals(this.ZIPTableField, value) != true)) {
                    this.ZIPTableField = value;
                    this.RaisePropertyChanged("ZIPTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool accountType {
            get {
                return this.accountTypeField;
            }
            set {
                if ((this.accountTypeField.Equals(value) != true)) {
                    this.accountTypeField = value;
                    this.RaisePropertyChanged("accountType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> currentPartyID {
            get {
                return this.currentPartyIDField;
            }
            set {
                if ((this.currentPartyIDField.Equals(value) != true)) {
                    this.currentPartyIDField = value;
                    this.RaisePropertyChanged("currentPartyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int zip {
            get {
                return this.zipField;
            }
            set {
                if ((this.zipField.Equals(value) != true)) {
                    this.zipField = value;
                    this.RaisePropertyChanged("zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ZIPTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class ZIPTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable[] UserTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int zipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable[] UserTables {
            get {
                return this.UserTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTablesField, value) != true)) {
                    this.UserTablesField = value;
                    this.RaisePropertyChanged("UserTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int zip {
            get {
                return this.zipField;
            }
            set {
                if ((this.zipField.Equals(value) != true)) {
                    this.zipField = value;
                    this.RaisePropertyChanged("zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class FriendTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTable1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long idTwoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable {
            get {
                return this.UserTableField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTableField, value) != true)) {
                    this.UserTableField = value;
                    this.RaisePropertyChanged("UserTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable1 {
            get {
                return this.UserTable1Field;
            }
            set {
                if ((object.ReferenceEquals(this.UserTable1Field, value) != true)) {
                    this.UserTable1Field = value;
                    this.RaisePropertyChanged("UserTable1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long idOne {
            get {
                return this.idOneField;
            }
            set {
                if ((this.idOneField.Equals(value) != true)) {
                    this.idOneField = value;
                    this.RaisePropertyChanged("idOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long idTwo {
            get {
                return this.idTwoField;
            }
            set {
                if ((this.idTwoField.Equals(value) != true)) {
                    this.idTwoField = value;
                    this.RaisePropertyChanged("idTwo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PartyTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class PartyTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short AvailablePlacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.BlacklistTable[] BlacklistTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RowVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.SongsForPartyTable[] SongsForPartyTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UsersAtParty[] UsersAtPartiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime endDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> locationLatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> locationLongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ownerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool privacyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime startDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short AvailablePlaces {
            get {
                return this.AvailablePlacesField;
            }
            set {
                if ((this.AvailablePlacesField.Equals(value) != true)) {
                    this.AvailablePlacesField = value;
                    this.RaisePropertyChanged("AvailablePlaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.BlacklistTable[] BlacklistTables {
            get {
                return this.BlacklistTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.BlacklistTablesField, value) != true)) {
                    this.BlacklistTablesField = value;
                    this.RaisePropertyChanged("BlacklistTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion {
            get {
                return this.RowVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.RowVersionField, value) != true)) {
                    this.RowVersionField = value;
                    this.RaisePropertyChanged("RowVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.SongsForPartyTable[] SongsForPartyTables {
            get {
                return this.SongsForPartyTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsForPartyTablesField, value) != true)) {
                    this.SongsForPartyTablesField = value;
                    this.RaisePropertyChanged("SongsForPartyTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable {
            get {
                return this.UserTableField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTableField, value) != true)) {
                    this.UserTableField = value;
                    this.RaisePropertyChanged("UserTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UsersAtParty[] UsersAtParties {
            get {
                return this.UsersAtPartiesField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersAtPartiesField, value) != true)) {
                    this.UsersAtPartiesField = value;
                    this.RaisePropertyChanged("UsersAtParties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime endDate {
            get {
                return this.endDateField;
            }
            set {
                if ((this.endDateField.Equals(value) != true)) {
                    this.endDateField = value;
                    this.RaisePropertyChanged("endDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> locationLatitude {
            get {
                return this.locationLatitudeField;
            }
            set {
                if ((this.locationLatitudeField.Equals(value) != true)) {
                    this.locationLatitudeField = value;
                    this.RaisePropertyChanged("locationLatitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> locationLongitude {
            get {
                return this.locationLongitudeField;
            }
            set {
                if ((this.locationLongitudeField.Equals(value) != true)) {
                    this.locationLongitudeField = value;
                    this.RaisePropertyChanged("locationLongitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ownerID {
            get {
                return this.ownerIDField;
            }
            set {
                if ((this.ownerIDField.Equals(value) != true)) {
                    this.ownerIDField = value;
                    this.RaisePropertyChanged("ownerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool privacy {
            get {
                return this.privacyField;
            }
            set {
                if ((this.privacyField.Equals(value) != true)) {
                    this.privacyField = value;
                    this.RaisePropertyChanged("privacy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime startDate {
            get {
                return this.startDateField;
            }
            set {
                if ((this.startDateField.Equals(value) != true)) {
                    this.startDateField = value;
                    this.RaisePropertyChanged("startDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SongRatingFromPartyTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class SongRatingFromPartyTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.SongsForPartyTable SongsForPartyTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long partyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string songURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long userIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int voteTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.SongsForPartyTable SongsForPartyTable {
            get {
                return this.SongsForPartyTableField;
            }
            set {
                if ((object.ReferenceEquals(this.SongsForPartyTableField, value) != true)) {
                    this.SongsForPartyTableField = value;
                    this.RaisePropertyChanged("SongsForPartyTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable {
            get {
                return this.UserTableField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTableField, value) != true)) {
                    this.UserTableField = value;
                    this.RaisePropertyChanged("UserTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long partyID {
            get {
                return this.partyIDField;
            }
            set {
                if ((this.partyIDField.Equals(value) != true)) {
                    this.partyIDField = value;
                    this.RaisePropertyChanged("partyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string songURL {
            get {
                return this.songURLField;
            }
            set {
                if ((object.ReferenceEquals(this.songURLField, value) != true)) {
                    this.songURLField = value;
                    this.RaisePropertyChanged("songURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int voteType {
            get {
                return this.voteTypeField;
            }
            set {
                if ((this.voteTypeField.Equals(value) != true)) {
                    this.voteTypeField = value;
                    this.RaisePropertyChanged("voteType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class UserLoginTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long userIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable {
            get {
                return this.UserTableField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTableField, value) != true)) {
                    this.UserTableField = value;
                    this.RaisePropertyChanged("UserTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsersAtParty", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class UsersAtParty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.PartyTable PartyTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.UserTable UserTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool adminPrivilegesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long partyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long userIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.PartyTable PartyTable {
            get {
                return this.PartyTableField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyTableField, value) != true)) {
                    this.PartyTableField = value;
                    this.RaisePropertyChanged("PartyTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.UserTable UserTable {
            get {
                return this.UserTableField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTableField, value) != true)) {
                    this.UserTableField = value;
                    this.RaisePropertyChanged("UserTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool adminPrivileges {
            get {
                return this.adminPrivilegesField;
            }
            set {
                if ((this.adminPrivilegesField.Equals(value) != true)) {
                    this.adminPrivilegesField = value;
                    this.RaisePropertyChanged("adminPrivileges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long partyID {
            get {
                return this.partyIDField;
            }
            set {
                if ((this.partyIDField.Equals(value) != true)) {
                    this.partyIDField = value;
                    this.RaisePropertyChanged("partyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlacklistTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class BlacklistTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.PartyTable PartyTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long partyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string songURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.PartyTable PartyTable {
            get {
                return this.PartyTableField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyTableField, value) != true)) {
                    this.PartyTableField = value;
                    this.RaisePropertyChanged("PartyTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long partyID {
            get {
                return this.partyIDField;
            }
            set {
                if ((this.partyIDField.Equals(value) != true)) {
                    this.partyIDField = value;
                    this.RaisePropertyChanged("partyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string songURL {
            get {
                return this.songURLField;
            }
            set {
                if ((object.ReferenceEquals(this.songURLField, value) != true)) {
                    this.songURLField = value;
                    this.RaisePropertyChanged("songURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SongsForPartyTable", Namespace="http://schemas.datacontract.org/2004/07/DataAccessLayer")]
    [System.SerializableAttribute()]
    public partial class SongsForPartyTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.PartyTable PartyTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RowVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] SongRatingFromPartyTablesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long partyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ratingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string songURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.PartyTable PartyTable {
            get {
                return this.PartyTableField;
            }
            set {
                if ((object.ReferenceEquals(this.PartyTableField, value) != true)) {
                    this.PartyTableField = value;
                    this.RaisePropertyChanged("PartyTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RowVersion {
            get {
                return this.RowVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.RowVersionField, value) != true)) {
                    this.RowVersionField = value;
                    this.RaisePropertyChanged("RowVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] SongRatingFromPartyTables {
            get {
                return this.SongRatingFromPartyTablesField;
            }
            set {
                if ((object.ReferenceEquals(this.SongRatingFromPartyTablesField, value) != true)) {
                    this.SongRatingFromPartyTablesField = value;
                    this.RaisePropertyChanged("SongRatingFromPartyTables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long partyID {
            get {
                return this.partyIDField;
            }
            set {
                if ((this.partyIDField.Equals(value) != true)) {
                    this.partyIDField = value;
                    this.RaisePropertyChanged("partyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int rating {
            get {
                return this.ratingField;
            }
            set {
                if ((this.ratingField.Equals(value) != true)) {
                    this.ratingField = value;
                    this.RaisePropertyChanged("rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string songURL {
            get {
                return this.songURLField;
            }
            set {
                if ((object.ReferenceEquals(this.songURLField, value) != true)) {
                    this.songURLField = value;
                    this.RaisePropertyChanged("songURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(MVC_ChooseEm.ServiceReference1.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RegisterClient")]
        void RegisterClient(long id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/RegisterClient")]
        System.Threading.Tasks.Task RegisterClientAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyServer")]
        void NotifyServer(MVC_ChooseEm.ServiceReference1.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/NotifyServer")]
        System.Threading.Tasks.Task NotifyServerAsync(MVC_ChooseEm.ServiceReference1.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateUser", ReplyAction="http://tempuri.org/IService/CreateUserResponse")]
        void CreateUser(string firstName, string lastName, bool accountType, int zip, long currentPartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateUser", ReplyAction="http://tempuri.org/IService/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(string firstName, string lastName, bool accountType, int zip, long currentPartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUser", ReplyAction="http://tempuri.org/IService/GetUserResponse")]
        MVC_ChooseEm.ServiceReference1.UserTable GetUser(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUser", ReplyAction="http://tempuri.org/IService/GetUserResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UserTable> GetUserAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddLogInAccount", ReplyAction="http://tempuri.org/IService/AddLogInAccountResponse")]
        void AddLogInAccount(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddLogInAccount", ReplyAction="http://tempuri.org/IService/AddLogInAccountResponse")]
        System.Threading.Tasks.Task AddLogInAccountAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateParty", ReplyAction="http://tempuri.org/IService/CreatePartyResponse")]
        long CreateParty(MVC_ChooseEm.ServiceReference1.PartyTable party);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateParty", ReplyAction="http://tempuri.org/IService/CreatePartyResponse")]
        System.Threading.Tasks.Task<long> CreatePartyAsync(MVC_ChooseEm.ServiceReference1.PartyTable party);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPartyById", ReplyAction="http://tempuri.org/IService/GetPartyByIdResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable GetPartyById(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPartyById", ReplyAction="http://tempuri.org/IService/GetPartyByIdResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable> GetPartyByIdAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllParties", ReplyAction="http://tempuri.org/IService/GetAllPartiesResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllParties(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllParties", ReplyAction="http://tempuri.org/IService/GetAllPartiesResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllPartiesAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllNotJoinedParties", ReplyAction="http://tempuri.org/IService/GetAllNotJoinedPartiesResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllNotJoinedParties(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllNotJoinedParties", ReplyAction="http://tempuri.org/IService/GetAllNotJoinedPartiesResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllNotJoinedPartiesAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllJoinedParties", ReplyAction="http://tempuri.org/IService/GetAllJoinedPartiesResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllJoinedParties(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllJoinedParties", ReplyAction="http://tempuri.org/IService/GetAllJoinedPartiesResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllJoinedPartiesAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOwner", ReplyAction="http://tempuri.org/IService/GetOwnerResponse")]
        MVC_ChooseEm.ServiceReference1.UserTable GetOwner(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOwner", ReplyAction="http://tempuri.org/IService/GetOwnerResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UserTable> GetOwnerAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveParty", ReplyAction="http://tempuri.org/IService/RemovePartyResponse")]
        bool RemoveParty(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveParty", ReplyAction="http://tempuri.org/IService/RemovePartyResponse")]
        System.Threading.Tasks.Task<bool> RemovePartyAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateParty", ReplyAction="http://tempuri.org/IService/UpdatePartyResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable UpdateParty(MVC_ChooseEm.ServiceReference1.PartyTable updatedParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateParty", ReplyAction="http://tempuri.org/IService/UpdatePartyResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable> UpdatePartyAsync(MVC_ChooseEm.ServiceReference1.PartyTable updatedParty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateUserAtParty", ReplyAction="http://tempuri.org/IService/CreateUserAtPartyResponse")]
        void CreateUserAtParty(MVC_ChooseEm.ServiceReference1.UsersAtParty user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateUserAtParty", ReplyAction="http://tempuri.org/IService/CreateUserAtPartyResponse")]
        System.Threading.Tasks.Task CreateUserAtPartyAsync(MVC_ChooseEm.ServiceReference1.UsersAtParty user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserForID", ReplyAction="http://tempuri.org/IService/GetUserForIDResponse")]
        MVC_ChooseEm.ServiceReference1.UsersAtParty GetUserForID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserForID", ReplyAction="http://tempuri.org/IService/GetUserForIDResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> GetUserForIDAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        MVC_ChooseEm.ServiceReference1.UsersAtParty[] GetAllUsers(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty[]> GetAllUsersAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserAfterFK", ReplyAction="http://tempuri.org/IService/GetUserAfterFKResponse")]
        MVC_ChooseEm.ServiceReference1.UsersAtParty GetUserAfterFK(long partyID, long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserAfterFK", ReplyAction="http://tempuri.org/IService/GetUserAfterFKResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> GetUserAfterFKAsync(long partyID, long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPartiesOfUser", ReplyAction="http://tempuri.org/IService/GetAllPartiesOfUserResponse")]
        MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllPartiesOfUser(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPartiesOfUser", ReplyAction="http://tempuri.org/IService/GetAllPartiesOfUserResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllPartiesOfUserAsync(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserAtParty", ReplyAction="http://tempuri.org/IService/RemoveUserAtPartyResponse")]
        bool RemoveUserAtParty(long UserID, long PartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveUserAtParty", ReplyAction="http://tempuri.org/IService/RemoveUserAtPartyResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserAtPartyAsync(long UserID, long PartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUserAtParty", ReplyAction="http://tempuri.org/IService/UpdateUserAtPartyResponse")]
        MVC_ChooseEm.ServiceReference1.UsersAtParty UpdateUserAtParty(MVC_ChooseEm.ServiceReference1.UsersAtParty updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUserAtParty", ReplyAction="http://tempuri.org/IService/UpdateUserAtPartyResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> UpdateUserAtPartyAsync(MVC_ChooseEm.ServiceReference1.UsersAtParty updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSongInPartyPlaylist", ReplyAction="http://tempuri.org/IService/AddSongInPartyPlaylistResponse")]
        void AddSongInPartyPlaylist(long partyID, string songURL, int rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddSongInPartyPlaylist", ReplyAction="http://tempuri.org/IService/AddSongInPartyPlaylistResponse")]
        System.Threading.Tasks.Task AddSongInPartyPlaylistAsync(long partyID, string songURL, int rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSongFromPartyPlaylist", ReplyAction="http://tempuri.org/IService/GetSongFromPartyPlaylistResponse")]
        MVC_ChooseEm.ServiceReference1.SongsForPartyTable GetSongFromPartyPlaylist(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSongFromPartyPlaylist", ReplyAction="http://tempuri.org/IService/GetSongFromPartyPlaylistResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable> GetSongFromPartyPlaylistAsync(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSongs", ReplyAction="http://tempuri.org/IService/GetAllSongsResponse")]
        MVC_ChooseEm.ServiceReference1.SongsForPartyTable[] GetAllSongs(long partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSongs", ReplyAction="http://tempuri.org/IService/GetAllSongsResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable[]> GetAllSongsAsync(long partyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSongFromPartyPlaylist", ReplyAction="http://tempuri.org/IService/RemoveSongFromPartyPlaylistResponse")]
        bool RemoveSongFromPartyPlaylist(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveSongFromPartyPlaylist", ReplyAction="http://tempuri.org/IService/RemoveSongFromPartyPlaylistResponse")]
        System.Threading.Tasks.Task<bool> RemoveSongFromPartyPlaylistAsync(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSongsForParty", ReplyAction="http://tempuri.org/IService/UpdateSongsForPartyResponse")]
        MVC_ChooseEm.ServiceReference1.SongsForPartyTable UpdateSongsForParty(MVC_ChooseEm.ServiceReference1.SongsForPartyTable songs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSongsForParty", ReplyAction="http://tempuri.org/IService/UpdateSongsForPartyResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable> UpdateSongsForPartyAsync(MVC_ChooseEm.ServiceReference1.SongsForPartyTable songs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRating", ReplyAction="http://tempuri.org/IService/AddRatingResponse")]
        bool AddRating(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRating", ReplyAction="http://tempuri.org/IService/AddRatingResponse")]
        System.Threading.Tasks.Task<bool> AddRatingAsync(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CalculateTotalSongRating", ReplyAction="http://tempuri.org/IService/CalculateTotalSongRatingResponse")]
        int CalculateTotalSongRating(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CalculateTotalSongRating", ReplyAction="http://tempuri.org/IService/CalculateTotalSongRatingResponse")]
        System.Threading.Tasks.Task<int> CalculateTotalSongRatingAsync(long partyID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllRatings", ReplyAction="http://tempuri.org/IService/GetAllRatingsResponse")]
        MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] GetAllRatings(long partyID, long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllRatings", ReplyAction="http://tempuri.org/IService/GetAllRatingsResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[]> GetAllRatingsAsync(long partyID, long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRating", ReplyAction="http://tempuri.org/IService/RemoveRatingResponse")]
        bool RemoveRating(long partyID, long userID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemoveRating", ReplyAction="http://tempuri.org/IService/RemoveRatingResponse")]
        System.Threading.Tasks.Task<bool> RemoveRatingAsync(long partyID, long userID, string songURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VoteSong", ReplyAction="http://tempuri.org/IService/VoteSongResponse")]
        MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable VoteSong(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable updateSongRating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VoteSong", ReplyAction="http://tempuri.org/IService/VoteSongResponse")]
        System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable> VoteSongAsync(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable updateSongRating);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/BroadcastToClient")]
        void BroadcastToClient(MVC_ChooseEm.ServiceReference1.EventDataType eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MVC_ChooseEm.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<MVC_ChooseEm.ServiceReference1.IService>, MVC_ChooseEm.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClient(long id) {
            base.Channel.RegisterClient(id);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(long id) {
            return base.Channel.RegisterClientAsync(id);
        }
        
        public void NotifyServer(MVC_ChooseEm.ServiceReference1.EventDataType eventData) {
            base.Channel.NotifyServer(eventData);
        }
        
        public System.Threading.Tasks.Task NotifyServerAsync(MVC_ChooseEm.ServiceReference1.EventDataType eventData) {
            return base.Channel.NotifyServerAsync(eventData);
        }
        
        public void CreateUser(string firstName, string lastName, bool accountType, int zip, long currentPartyID) {
            base.Channel.CreateUser(firstName, lastName, accountType, zip, currentPartyID);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(string firstName, string lastName, bool accountType, int zip, long currentPartyID) {
            return base.Channel.CreateUserAsync(firstName, lastName, accountType, zip, currentPartyID);
        }
        
        public MVC_ChooseEm.ServiceReference1.UserTable GetUser(long ID) {
            return base.Channel.GetUser(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UserTable> GetUserAsync(long ID) {
            return base.Channel.GetUserAsync(ID);
        }
        
        public void AddLogInAccount(string username, string password) {
            base.Channel.AddLogInAccount(username, password);
        }
        
        public System.Threading.Tasks.Task AddLogInAccountAsync(string username, string password) {
            return base.Channel.AddLogInAccountAsync(username, password);
        }
        
        public long CreateParty(MVC_ChooseEm.ServiceReference1.PartyTable party) {
            return base.Channel.CreateParty(party);
        }
        
        public System.Threading.Tasks.Task<long> CreatePartyAsync(MVC_ChooseEm.ServiceReference1.PartyTable party) {
            return base.Channel.CreatePartyAsync(party);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable GetPartyById(long ID) {
            return base.Channel.GetPartyById(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable> GetPartyByIdAsync(long ID) {
            return base.Channel.GetPartyByIdAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllParties(long ID) {
            return base.Channel.GetAllParties(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllPartiesAsync(long ID) {
            return base.Channel.GetAllPartiesAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllNotJoinedParties(long ID) {
            return base.Channel.GetAllNotJoinedParties(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllNotJoinedPartiesAsync(long ID) {
            return base.Channel.GetAllNotJoinedPartiesAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllJoinedParties(long ID) {
            return base.Channel.GetAllJoinedParties(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllJoinedPartiesAsync(long ID) {
            return base.Channel.GetAllJoinedPartiesAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.UserTable GetOwner(long ID) {
            return base.Channel.GetOwner(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UserTable> GetOwnerAsync(long ID) {
            return base.Channel.GetOwnerAsync(ID);
        }
        
        public bool RemoveParty(long ID) {
            return base.Channel.RemoveParty(ID);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePartyAsync(long ID) {
            return base.Channel.RemovePartyAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable UpdateParty(MVC_ChooseEm.ServiceReference1.PartyTable updatedParty) {
            return base.Channel.UpdateParty(updatedParty);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable> UpdatePartyAsync(MVC_ChooseEm.ServiceReference1.PartyTable updatedParty) {
            return base.Channel.UpdatePartyAsync(updatedParty);
        }
        
        public void CreateUserAtParty(MVC_ChooseEm.ServiceReference1.UsersAtParty user) {
            base.Channel.CreateUserAtParty(user);
        }
        
        public System.Threading.Tasks.Task CreateUserAtPartyAsync(MVC_ChooseEm.ServiceReference1.UsersAtParty user) {
            return base.Channel.CreateUserAtPartyAsync(user);
        }
        
        public MVC_ChooseEm.ServiceReference1.UsersAtParty GetUserForID(long ID) {
            return base.Channel.GetUserForID(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> GetUserForIDAsync(long ID) {
            return base.Channel.GetUserForIDAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.UsersAtParty[] GetAllUsers(long ID) {
            return base.Channel.GetAllUsers(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty[]> GetAllUsersAsync(long ID) {
            return base.Channel.GetAllUsersAsync(ID);
        }
        
        public MVC_ChooseEm.ServiceReference1.UsersAtParty GetUserAfterFK(long partyID, long userID) {
            return base.Channel.GetUserAfterFK(partyID, userID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> GetUserAfterFKAsync(long partyID, long userID) {
            return base.Channel.GetUserAfterFKAsync(partyID, userID);
        }
        
        public MVC_ChooseEm.ServiceReference1.PartyTable[] GetAllPartiesOfUser(long ID) {
            return base.Channel.GetAllPartiesOfUser(ID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.PartyTable[]> GetAllPartiesOfUserAsync(long ID) {
            return base.Channel.GetAllPartiesOfUserAsync(ID);
        }
        
        public bool RemoveUserAtParty(long UserID, long PartyID) {
            return base.Channel.RemoveUserAtParty(UserID, PartyID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserAtPartyAsync(long UserID, long PartyID) {
            return base.Channel.RemoveUserAtPartyAsync(UserID, PartyID);
        }
        
        public MVC_ChooseEm.ServiceReference1.UsersAtParty UpdateUserAtParty(MVC_ChooseEm.ServiceReference1.UsersAtParty updatedUser) {
            return base.Channel.UpdateUserAtParty(updatedUser);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.UsersAtParty> UpdateUserAtPartyAsync(MVC_ChooseEm.ServiceReference1.UsersAtParty updatedUser) {
            return base.Channel.UpdateUserAtPartyAsync(updatedUser);
        }
        
        public void AddSongInPartyPlaylist(long partyID, string songURL, int rating) {
            base.Channel.AddSongInPartyPlaylist(partyID, songURL, rating);
        }
        
        public System.Threading.Tasks.Task AddSongInPartyPlaylistAsync(long partyID, string songURL, int rating) {
            return base.Channel.AddSongInPartyPlaylistAsync(partyID, songURL, rating);
        }
        
        public MVC_ChooseEm.ServiceReference1.SongsForPartyTable GetSongFromPartyPlaylist(long partyID, string songURL) {
            return base.Channel.GetSongFromPartyPlaylist(partyID, songURL);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable> GetSongFromPartyPlaylistAsync(long partyID, string songURL) {
            return base.Channel.GetSongFromPartyPlaylistAsync(partyID, songURL);
        }
        
        public MVC_ChooseEm.ServiceReference1.SongsForPartyTable[] GetAllSongs(long partyID) {
            return base.Channel.GetAllSongs(partyID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable[]> GetAllSongsAsync(long partyID) {
            return base.Channel.GetAllSongsAsync(partyID);
        }
        
        public bool RemoveSongFromPartyPlaylist(long partyID, string songURL) {
            return base.Channel.RemoveSongFromPartyPlaylist(partyID, songURL);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSongFromPartyPlaylistAsync(long partyID, string songURL) {
            return base.Channel.RemoveSongFromPartyPlaylistAsync(partyID, songURL);
        }
        
        public MVC_ChooseEm.ServiceReference1.SongsForPartyTable UpdateSongsForParty(MVC_ChooseEm.ServiceReference1.SongsForPartyTable songs) {
            return base.Channel.UpdateSongsForParty(songs);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongsForPartyTable> UpdateSongsForPartyAsync(MVC_ChooseEm.ServiceReference1.SongsForPartyTable songs) {
            return base.Channel.UpdateSongsForPartyAsync(songs);
        }
        
        public bool AddRating(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable rating) {
            return base.Channel.AddRating(rating);
        }
        
        public System.Threading.Tasks.Task<bool> AddRatingAsync(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable rating) {
            return base.Channel.AddRatingAsync(rating);
        }
        
        public int CalculateTotalSongRating(long partyID, string songURL) {
            return base.Channel.CalculateTotalSongRating(partyID, songURL);
        }
        
        public System.Threading.Tasks.Task<int> CalculateTotalSongRatingAsync(long partyID, string songURL) {
            return base.Channel.CalculateTotalSongRatingAsync(partyID, songURL);
        }
        
        public MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[] GetAllRatings(long partyID, long userID) {
            return base.Channel.GetAllRatings(partyID, userID);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable[]> GetAllRatingsAsync(long partyID, long userID) {
            return base.Channel.GetAllRatingsAsync(partyID, userID);
        }
        
        public bool RemoveRating(long partyID, long userID, string songURL) {
            return base.Channel.RemoveRating(partyID, userID, songURL);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveRatingAsync(long partyID, long userID, string songURL) {
            return base.Channel.RemoveRatingAsync(partyID, userID, songURL);
        }
        
        public MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable VoteSong(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable updateSongRating) {
            return base.Channel.VoteSong(updateSongRating);
        }
        
        public System.Threading.Tasks.Task<MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable> VoteSongAsync(MVC_ChooseEm.ServiceReference1.SongRatingFromPartyTable updateSongRating) {
            return base.Channel.VoteSongAsync(updateSongRating);
        }
    }
}
